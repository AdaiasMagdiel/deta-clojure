{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Deta Clojure Library","text":"<p>Deta is a Clojure library designed to simplify interactions with the Deta database. It provides a straightforward way to initialize a database connection and perform basic operations such as inserting data. This library is ideal for developers looking to integrate Deta database functionality into their Clojure applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Database Initialization: Easily establish a connection to a Deta database with a straightforward function call.</li> <li>Data Insertion: Insert data into the Deta database, supporting various data types.</li> <li>Data Update: Update existing data in the Deta database or insert new data if the key does not exist.</li> <li>Data Retrieval: Fetch data from the Deta database by specifying a key.</li> <li>Data Deletion: Remove data from the Deta database by specifying a key.</li> <li>Testing: A comprehensive test suite is essential to ensure reliability and accuracy.</li> </ul>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Leiningen/Boot</li> <li>Clojure CLI/deps.edn</li> <li>Gradle</li> <li>Maven</li> <li>Tests</li> <li>Running Tests</li> <li>Windows</li> <li>Linux/MacOS</li> <li>Usage</li> <li>Getting Started</li> <li>Exemplified Usage<ul> <li>Database Connection Initialization</li> <li>Using the <code>put</code> Function<ul> <li>Basic Usage</li> <li>Handling Non-Map Values</li> <li>Return Value and Exceptions</li> <li>Example with Non-Map Value</li> </ul> </li> <li>Using the <code>get</code> Function<ul> <li>Basic Usage</li> <li>Return Value and Exceptions</li> </ul> </li> <li>Using the <code>delete</code> Function<ul> <li>Basic Usage</li> <li>Return Value and Exceptions</li> <li>Example of Usage</li> </ul> </li> <li>Using the <code>insert</code> Function<ul> <li>Basic Usage</li> <li>Handling Non-Map Values</li> <li>Return Value and Exceptions</li> <li>Example with Non-Map Value</li> </ul> </li> <li>Using the <code>fetch</code> Function<ul> <li>Basic Usage</li> <li>Parameters</li> <li>Example of Use</li> <li>Return Value and Exceptions</li> <li>Example with Query Parameters</li> </ul> </li> <li>Use Cases<ul> <li>Data Insertion</li> <li>Data Retrieval</li> <li>Data Removal</li> <li>Data Fetching</li> </ul> </li> </ul> </li> <li>Reference</li> <li>Base</li> <li>Put</li> <li>Get</li> <li>Delete</li> <li>Insert</li> <li>Fetch</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#leiningenboot","title":"Leiningen/Boot","text":"<p>Add the following dependency to your <code>project.clj</code>:</p> <pre><code>[com.adaiasmagdiel/deta \"0.0.5\"]\n</code></pre> <p></p>"},{"location":"#clojure-clidepsedn","title":"Clojure CLI/deps.edn","text":"<p>Add the following dependency to your <code>deps.edn</code>:</p> <pre><code>com.adaiasmagdiel/deta {:mvn/version \"0.0.5\"}\n</code></pre> <p></p>"},{"location":"#gradle","title":"Gradle","text":"<p>Add the following dependency to your <code>build.gradle</code>:</p> <pre><code>implementation(\"com.adaiasmagdiel:deta:0.0.5\")\n</code></pre> <p></p>"},{"location":"#maven","title":"Maven","text":"<p>Add the following dependency to your <code>pom.xml</code>:</p> <pre><code>&lt;dependency&gt;\n &lt;groupId&gt;com.adaiasmagdiel&lt;/groupId&gt;\n &lt;artifactId&gt;deta&lt;/artifactId&gt;\n &lt;version&gt;0.0.5&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p></p>"},{"location":"#tests","title":"Tests","text":"<p>The <code>deta.base-test</code> namespace includes tests for the <code>base</code> and <code>put</code> functions. These tests cover various scenarios, including valid and invalid <code>deta-key</code> inputs, different data types for the <code>put</code> function, and the behavior of the <code>put</code> function when a key is provided.</p> <p></p>"},{"location":"#running-tests","title":"Running Tests","text":"<p>To run the tests, set the <code>DETA_KEY</code> environment variable to a valid Deta key beforehand.</p> <p></p>"},{"location":"#windows","title":"Windows","text":"<pre><code>set DETA_KEY=your_deta_key_here\nlein test\n</code></pre>"},{"location":"#linuxmacos","title":"Linux/MacOS","text":"<pre><code>export DETA_KEY=your_deta_key_here\nlein test\n</code></pre> <p>Replace <code>your_deta_key_here</code> with your actual Deta key.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Base</li> <li>Put</li> <li>Get</li> <li>Delete</li> <li>Insert</li> <li>Fetch</li> </ul>"},{"location":"reference/#base","title":"Base","text":"<pre><code>(base/base deta-key basename)\n</code></pre> <ul> <li>Return: Database connection object.</li> <li>Exceptions: If <code>deta-key</code> is invalid or not provided.</li> </ul>"},{"location":"reference/#put","title":"Put","text":"<pre><code>(base/put db data)\n(base/put db data key)\n</code></pre> <ul> <li>Return: Map containing the inserted data and the generated key (if not provided).</li> <li>Exceptions: If data type is not supported, or if <code>deta-key</code> is invalid or not provided.</li> </ul>"},{"location":"reference/#get","title":"Get","text":"<pre><code>(base/get db key)\n</code></pre> <ul> <li>Return: Retrieved data as a map if the key exists, or <code>nil</code> if the key does not exist or an error occurs.</li> <li>Exceptions: If <code>key</code> is not provided or is empty.</li> </ul>"},{"location":"reference/#delete","title":"Delete","text":"<pre><code>(base/delete db key)\n</code></pre> <ul> <li>Return: <code>nil</code>. The function does not return a meaningful value as its purpose is to remove an item from the database.</li> <li>Exceptions: Throws an <code>Exception</code> if the key is not provided or is empty.</li> </ul>"},{"location":"reference/#insert","title":"Insert","text":"<pre><code>(base/insert db data)\n(base/insert db data key)\n</code></pre> <ul> <li>Return: Map containing the inserted data and the generated key (if not provided).</li> <li>Exceptions: Throws an <code>Exception</code> if the data type is not supported, or if <code>deta-key</code> is invalid or not provided, or if an item with the provided key already exists.</li> </ul>"},{"location":"reference/#fetch","title":"Fetch","text":"<pre><code>(fetch db)\n(fetch db query)\n(fetch db query parameters)\n</code></pre> <ul> <li> <p>Parameters:</p> <ul> <li><code>db</code>: The database connection object.</li> <li><code>query</code>: A string or list of strings representing the query to be executed.</li> <li><code>parameters</code>: A map containing additional query parameters, including <code>limit</code>, <code>last</code>, and <code>desc</code>.</li> </ul> </li> <li> <p>Return: A map containing the number of items found (<code>:count</code>), the last key queried (<code>:last</code>), and a list of the items found (<code>:items</code>). If the query fails, it returns a map with <code>:count</code> 0, <code>:last</code> <code>nil</code>, and <code>:items</code> an empty list.</p> </li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>This section offers an overview of the <code>deta</code> library, designed to interact with Deta Base, a NoSQL database service. The library is presented as a tool for integration with Clojure projects, highlighting its benefits.</p>"},{"location":"usage/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Exemplified Usage</li> <li>Database Connection Initialization</li> <li>Using the <code>put</code> Function<ul> <li>Basic Usage</li> <li>Handling Non-Map Values</li> <li>Return Value and Exceptions</li> <li>Example with Non-Map Value</li> </ul> </li> <li>Using the <code>get</code> Function<ul> <li>Basic Usage</li> <li>Return Value and Exceptions</li> </ul> </li> <li>Using the <code>delete</code> Function<ul> <li>Basic Usage</li> <li>Return Value and Exceptions</li> <li>Example of Usage</li> </ul> </li> <li>Using the <code>insert</code> Function<ul> <li>Basic Usage</li> <li>Handling Non-Map Values</li> <li>Return Value and Exceptions</li> <li>Example with Non-Map Value</li> </ul> </li> <li>Using the <code>fetch</code> Function<ul> <li>Basic Usage</li> <li>Parameters</li> <li>Example of Use</li> <li>Return Value and Exceptions</li> <li>Example with Query Parameters</li> </ul> </li> <li>Use Cases<ul> <li>Data Insertion</li> <li>Data Retrieval</li> <li>Data Removal</li> <li>Data Fetching</li> </ul> </li> </ul>"},{"location":"usage/#getting-started","title":"Getting Started","text":"<p>To use the <code>deta.base</code> namespace, include it in your project dependencies and require it in your code. The namespace utilizes <code>clojure.string</code>, <code>clojure.data.json</code>, and <code>clj-http.client</code> for its operations.</p> <pre><code>(ns your-namespace\n (:require [deta.base :as base]))\n</code></pre> <p></p>"},{"location":"usage/#exemplified-usage","title":"Exemplified Usage","text":""},{"location":"usage/#database-connection-initialization","title":"Database Connection Initialization","text":"<pre><code>(def db (base/base \"a0abcyxzxsr_aSecretValue\" \"items\"))\n</code></pre>"},{"location":"usage/#using-the-put-function","title":"Using the <code>put</code> Function","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<pre><code>(base/put db {:a 1 :b 2} \"item-key\")\n(base/put db {:a 1 :b 2}) ; The key is automatically generated on the server\n</code></pre>"},{"location":"usage/#handling-non-map-values","title":"Handling Non-Map Values","text":"<p>If the data passed to the <code>put</code> function is not a map, it is automatically encapsulated in a map with the key <code>\"value\"</code>. This allows for flexibility in the types of data that can be stored in the database.</p> <p></p>"},{"location":"usage/#return-value-and-exceptions","title":"Return Value and Exceptions","text":"<p>The <code>put</code> function returns a map containing the inserted data. If a key is not provided, the server automatically generates one. The returned map includes the data and the generated key.</p> <p>The <code>put</code> function throws an <code>Exception</code> if the data type is not supported, or if the <code>deta-key</code> is invalid or not provided.</p> <p></p>"},{"location":"usage/#example-with-non-map-value","title":"Example with Non-Map Value","text":"<pre><code>(base/put db \"Hello, World!\") ; Automatically encapsulated in {\"value\" \"Hello, World!\"}\n</code></pre>"},{"location":"usage/#using-the-get-function","title":"Using the <code>get</code> Function","text":""},{"location":"usage/#basic-usage_1","title":"Basic Usage","text":"<pre><code>(base/get db \"item-key\")\n</code></pre>"},{"location":"usage/#return-value-and-exceptions_1","title":"Return Value and Exceptions","text":"<p>The <code>get</code> function returns a map containing the retrieved data if the key exists, or <code>nil</code> if the key does not exist or an error occurs.</p> <p>The <code>get</code> function throws an <code>Exception</code> if the <code>deta-key</code> is invalid or not provided, or if the key is empty or not provided.</p> <p></p>"},{"location":"usage/#using-the-delete-function","title":"Using the <code>delete</code> Function","text":""},{"location":"usage/#basic-usage_2","title":"Basic Usage","text":"<pre><code>(base/delete db \"item-key\")\n</code></pre>"},{"location":"usage/#return-value-and-exceptions_2","title":"Return Value and Exceptions","text":"<p>The <code>delete</code> function does not return a meaningful value, as its purpose is to remove an item from the database. If the provided key is <code>nil</code> or empty, the function will throw an exception. Otherwise, it attempts to delete the item corresponding to the provided key.</p> <p>The <code>delete</code> function throws an <code>Exception</code> if the project key is not provided or is invalid.</p> <p></p>"},{"location":"usage/#example-of-usage","title":"Example of Usage","text":"<pre><code>(base/delete db \"user-123\") ; Attempts to delete the item with the key \"user-123\"\n</code></pre>"},{"location":"usage/#using-the-insert-function","title":"Using the <code>insert</code> Function","text":""},{"location":"usage/#basic-usage_3","title":"Basic Usage","text":"<pre><code>(base/insert db {:a 1 :b 2} \"item-key\")\n(base/insert db {:a 1 :b 2}) ; The key is automatically generated on the server\n</code></pre>"},{"location":"usage/#handling-non-map-values_1","title":"Handling Non-Map Values","text":"<p>If the data passed to the <code>insert</code> function is not a map, it is automatically encapsulated in a map with the key <code>\"value\"</code>. This allows for flexibility in the types of data that can be stored in the database.</p> <p></p>"},{"location":"usage/#return-value-and-exceptions_3","title":"Return Value and Exceptions","text":"<p>The <code>insert</code> function returns a map containing the inserted data. If a key is not provided, the server automatically generates one. The returned map includes the data and the generated key.</p> <p>The <code>insert</code> function throws an <code>Exception</code> if an item with the provided key already exists (status code 409), or if the data type is not supported, or if the <code>deta-key</code> is invalid or not provided.</p> <p></p>"},{"location":"usage/#example-with-non-map-value_1","title":"Example with Non-Map Value","text":"<pre><code>(base/insert db \"Hello, World!\") ; Automatically encapsulated in {\"value\" \"Hello, World!\"}\n</code></pre>"},{"location":"usage/#using-the-fetch-function","title":"Using the <code>fetch</code> Function","text":"<p>The <code>fetch</code> function is a powerful tool for performing custom queries on the Deta Base. It supports pagination, sorting, and limiting results, making it ideal for efficiently retrieving large sets of data.</p> <p></p>"},{"location":"usage/#basic-usage_4","title":"Basic Usage","text":"<pre><code>(base/fetch db)\n(base/fetch db query)\n(base/fetch db query parameters)\n</code></pre> <ul> <li><code>db</code>: The database connection object.</li> <li><code>query</code>: A list of queries or a single query as a string. If is empty returns all results from database. Read the Deta Base documentation to know more about queries.</li> <li><code>parameters</code>: A map of parameters that can include <code>:limit</code>, <code>:last</code> and <code>:desc</code>.</li> </ul>"},{"location":"usage/#parameters","title":"Parameters","text":"<ul> <li><code>:limit</code>: The maximum number of items to be returned. The default is 1000.</li> <li><code>:last</code>: The key of the last item from the last query, used for pagination. The default is <code>nil</code>.</li> <li><code>:desc</code>: A boolean indicating whether the sorting should be descending. The default is <code>false</code>.</li> </ul>"},{"location":"usage/#example-of-use","title":"Example of Use","text":"<pre><code>(base/fetch db {:name \"John Doe\"}) ; Basic query\n(base/fetch db {:age 30} {:limit 10 :last \"key\"}) ; Query with limit and last\n(base/fetch db {:age?r [22, 30]} {:limit 10 :desc true}) ; Query with limit and sorting mode\n(base/fetch db) ; Fetching all results from current Deta Base\n(base/fetch db {} {:limit 1 :last \"deta-is-awesome\"}) ; Fetching the first result starting from the key \"deta-is-awesome\"\n</code></pre> <p>Read the Deta Base documentation to know more about queries.</p> <p></p>"},{"location":"usage/#return-value-and-exceptions_4","title":"Return Value and Exceptions","text":"<p>The <code>fetch</code> function returns a map containing the number of items found (<code>:count</code>), the key of the last item (<code>:last</code>), and the list of found items (<code>:items</code>). If an error occurs during the query, the function will return a map with <code>:count</code> 0, <code>:last</code> <code>nil</code>, and <code>:items</code> an empty list.</p> <p></p>"},{"location":"usage/#example-with-query-parameters","title":"Example with Query Parameters","text":"<pre><code>(base/fetch db [{:age?gt 30} {:name \"Gulliver\"}] {:limit 10 :desc true})\n; Returns: {:count 5 :last \"user-123\" :items [{:name \"Gulliver\" :age 35} ...]}\n</code></pre>"},{"location":"usage/#use-cases","title":"Use Cases","text":""},{"location":"usage/#data-insertion","title":"Data Insertion","text":"<p>The <code>put</code> function's ability to accept any type of data makes it versatile for various use cases. Here are examples of inserting various types of data:</p> <pre><code>(base/put db {:name \"John Doe\" :age 30}) ; Inserting a map\n(base/put db \"Hello, World!\") ; Inserting a string\n(base/put db 42) ; Inserting an integer\n(base/put db 3.14) ; Inserting a float\n(base/put db true) ; Inserting a boolean\n(base/put db nil) ; Inserting nil\n</code></pre> <p>You can also use the <code>base/insert</code> command to insert data. The difference between <code>base/put</code> and <code>base/insert</code> is that <code>base/put</code> will insert data and update if the key already exists, while <code>base/insert</code> will throw an exception if the key already exists.</p> <pre><code>(base/insert db {:name \"John Doe\" :age 30}) ; Inserting a map\n(base/insert db \"Hello, World!\") ; Inserting a string\n(base/insert db 42) ; Inserting an integer\n(base/insert db 3.14) ; Inserting a float\n(base/insert db true) ; Inserting a boolean\n(base/insert db nil) ; Inserting nil\n</code></pre> <p></p>"},{"location":"usage/#data-retrieval","title":"Data Retrieval","text":"<p>To retrieve data from the database, you can use the <code>get</code> function. Here's an example of how to retrieve an item by its key:</p> <pre><code>(base/get db \"user-123\")\n</code></pre> <p></p>"},{"location":"usage/#data-removal","title":"Data Removal","text":"<p>The <code>delete</code> function is useful for removing specific items from the database. Here's an example of how you can use this function to remove an item:</p> <pre><code>(base/delete db \"item-key\") ; Removes the item with the key \"item-key\"\n</code></pre> <p></p>"},{"location":"usage/#data-fetching","title":"Data Fetching","text":"<p>To fetching data from the Deta Base, you can use the <code>fetch</code> function. Here's an example of how to fetch an item by its name:</p> <pre><code>(base/fetch db {:name \"John Doe\"})\n</code></pre>"}]}